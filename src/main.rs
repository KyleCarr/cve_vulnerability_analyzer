
mod functions;
mod schema;


use std::collections::HashMap;
use crate::functions::file_parsing::json_reader::data_loader;
use crate::functions::file_parsing::data_downloader;
use crate::functions::search::search;
fn main() {

    println!("Welcome to the CVE vulnerability analyzer");
    let mut result = HashMap::new();
    while {
        println!("Please enter a command");
        let mut input = String::new();
        std::io::stdin().read_line(&mut input).unwrap();
        let input = input.trim();
        let mut input_vec = input.split(" ").collect::<Vec<&str>>();
        let command = input_vec[0];
        input_vec.remove(0);
        match command {
            "search" => {
                result =  search::filter::search(input.to_string());
                //print out hashmap
                for (key, value) in result.iter() {
                    println!("{}: {}", key, value);
                }
                true
            }
            "help" => {
                println!("Commands:");
                println!("search -p <product> -y <year> - searches the database by product and year. there can be multiple products and years");
                println!("exit");
                println!("sync - syncs the database with the latest CVE data");
                println!("clear");
                true
            }
            "sync" => {
                data_downloader::download_cve();
                data_loader::load_files();
                true
            }
            "export" => {
                search::filter::export_to_csv(result.clone());
                true
            }
            "examine" => {
                let name = input_vec[0].to_string();
                search::filter::examine_cve(name);
                true
            }
            "exit" => {
                println!("Exiting...");
                false
            }
            "clear" => {
                print!("{}[2J", 27 as char);
                true
            }
            _ => {
                println!("Command not found");
                true
            }
        }
    } {}
}

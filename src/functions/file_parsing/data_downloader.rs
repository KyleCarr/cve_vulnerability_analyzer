use std::io;
use std::fs;
use std::fs::File;
use std::path::Path;

pub fn download_cve(){
    let mut resp = reqwest::blocking::get("https://github.com/CVEProject/cvelistV5/archive/refs/heads/main.zip").expect("request failed");
    let mut out = File::create("data/cveList.zip").expect("failed to create file");
    io::copy(&mut resp, &mut out).expect("failed to copy content");
    unzip();
    if Path::exists("data/cveList.zip".as_ref()){
        fs::remove_file("data/cveList.zip").expect("failed to remove file");
    }
    if Path::exists("data/cvelistV5-main/cves/delta.json".as_ref()){
        fs::remove_file("data/cvelistV5-main/cves/delta.json").expect("failed to remove file");
    }
    if Path::exists("data/cvelistV5-main/cves/deltaLog.json".as_ref()){
        fs::remove_file("data/cvelistV5-main/cves/deltaLog.json").expect("failed to remove file");
    }
    if Path::exists("data/cvelistV5-main/cves/recent_activities.json".as_ref()){
        fs::remove_file("data/cvelistV5-main/cves/recent_activities.json").expect("failed to remove file");
    }

}

fn unzip() {
    let fname = std::path::Path::new("data/cveList.zip");
    let file = fs::File::open(fname).unwrap();

    let mut archive = zip::ZipArchive::new(file).unwrap();

    for i in 0..archive.len() {
        let mut file = archive.by_index(i).unwrap();
        let mut outpath = match file.enclosed_name() {
            Some(path) => path.to_owned(),
            None => continue,
        };
        outpath = std::path::PathBuf::from("data").join(outpath);
        {
            let comment = file.comment();
            if !comment.is_empty() {
                println!("File {i} comment: {comment}");
            }
        }

        if (*file.name()).ends_with('/') {
            println!("File {} extracted to \"{}\"", i, outpath.display());
            fs::create_dir_all(&outpath).unwrap();
        } else {
            println!(
                "File {} extracted to \"{}\" ({} bytes)",
                i,
                outpath.display(),
                file.size()
            );
            if let Some(p) = outpath.parent() {
                if !p.exists() {
                    fs::create_dir_all(p).unwrap();
                }
            }
            let mut outfile = fs::File::create(&outpath).unwrap();
            io::copy(&mut file, &mut outfile).unwrap();
        }

        // Get and Set permissions
        #[cfg(unix)]
        {
            use std::os::unix::fs::PermissionsExt;

            if let Some(mode) = file.unix_mode() {
                fs::set_permissions(&outpath, fs::Permissions::from_mode(mode)).unwrap();
            }
        }
    }
}
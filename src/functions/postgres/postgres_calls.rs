

extern crate diesel;


use crate::functions::postgres::models::*;
use diesel::prelude::*;
use diesel::pg::{Pg, PgConnection};
use crate::schema::cve;

fn init() ->PgConnection {

        //TODO: load db connection as environment variables
        let connection = PgConnection::establish("postgres://docker:password@localhost/postgresdb").unwrap();
    return connection;
    }

    pub fn post( _name: String, _product: String, _version: String, _description: String, _resources: Vec<String>){
        let db_connection = &mut init();

        let post = create_post(db_connection, _name, _product, _version, _description,_resources);
        println!("post created with id {}", post.id);
    }

    fn create_post(conn: &mut PgConnection,  name: String, product: String, version: String, description: String, resources: Vec<String>) -> Post {
    use crate::schema::cve;


    let new_post =  NewPost {  name, product, version, description, resources};

    diesel::insert_into(cve::table)
        .values(&new_post)
        .returning(Post::as_returning())
        .get_result(conn)
        .expect("Error saving new post")

}

pub fn set_filter(_name: Vec<String>, _description: Vec<String>) -> Vec<Filter> {
    let db_connection = &mut init();

    let filter = get_filter(db_connection, _name, _description);
    return filter;
}
pub fn get_filter(conn: &mut PgConnection, name: Vec<String>, description: Vec<String>) -> Vec<Filter> {
    use crate::schema::cve;
    let filter = Filter{name, description};
    diesel::sql_query("SELECT * FROM cve WHERE name = ANY($1) AND description = ANY($2)")
        .bind::<diesel::sql_types::Array<diesel::sql_types::Text>, _>(filter.name)
        .bind::<diesel::sql_types::Array<diesel::sql_types::Text>, _>(filter.description)
        .get_results(conn)
        .expect("Error loading posts")


   /* let query = cve::table
    .select(cve::all_columns)
    .filter(cve::name.eq_any(_name))
    .filter(cve::description.eq_any(_description));
    let result = query.load::<Filter>(conn).expect("Error loading posts");
    return result;*/



}


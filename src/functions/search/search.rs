pub mod filter {
    use std::collections::HashMap;
    use crate::functions::search::search::database_commands::search_db;

    pub fn search(input: String) -> HashMap<String, String> {
        //split string based on -p or -y
        //-p is a keyword
        //-y is a year
        //if -p is found, search description
        //if -y is found, search name
        //if neither is found, return
        //if both are found, search both

        let mut input_vec = input.split("-").collect::<Vec<&str>>();
        let mut product = Vec::new();
        let mut year = Vec::new();

        for i in 0..input_vec.len() {
            if input_vec[i].starts_with("p") {
                let val = str::replace(input_vec[i], "p ", "");
                product.push(val);
            } else if input_vec[i].starts_with("y") {
                let val = str::replace(input_vec[i], "y ", "");
                year.push(val);
            }
        }
        return search_db(year, product);
    }
}

pub mod database_commands {
    use std::collections::HashMap;
    use crate::functions::postgres::postgres_calls;
    pub fn search_db(_name: Vec<String>, _description: Vec<String>) -> HashMap<String, String> {

        return postgres_calls::set_filter(_name, _description);
    }
}